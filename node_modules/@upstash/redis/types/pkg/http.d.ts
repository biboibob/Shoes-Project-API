export declare type UpstashRequest = {
    path?: string[];
    /**
     * Request body will be serialized to json
     */
    body?: unknown;
};
export declare type UpstashResponse<TResult> = {
    result?: TResult;
    error?: string;
};
export interface Requester {
    request: <TResult = unknown>(req: UpstashRequest) => Promise<UpstashResponse<TResult>>;
}
export declare type RetryConfig = false | {
    /**
     * The number of retries to attempt before giving up.
     *
     * @default 5
     */
    retries?: number;
    /**
     * A backoff function receives the current retry cound and returns a number in milliseconds to wait before retrying.
     *
     * @default
     * ```ts
     * Math.exp(retryCount) * 50
     * ```
     */
    backoff?: (retryCount: number) => number;
};
declare type Options = {
    backend?: string;
};
export declare type HttpClientConfig = {
    headers?: Record<string, string>;
    baseUrl: string;
    options?: Options;
    retry?: RetryConfig;
};
export declare class HttpClient implements Requester {
    baseUrl: string;
    headers: Record<string, string>;
    readonly options?: {
        backend?: string;
    };
    readonly retry: {
        attempts: number;
        backoff: (retryCount: number) => number;
    };
    constructor(config: HttpClientConfig);
    request<TResult>(req: UpstashRequest): Promise<UpstashResponse<TResult>>;
}
export {};
